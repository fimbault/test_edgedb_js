"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const process = require("process");
const child_process = require("child_process");
const index_node_1 = require("../src/index.node");
exports.default = async () => {
    console.log("\nStarting EdgeDB test cluster...");
    let ok = null;
    let err = null;
    let stdoutData = "";
    let stderrData = "";
    const done = new Promise((resolve, reject) => {
        ok = resolve;
        err = reject;
    });
    let srvcmd = "edgedb-server";
    if (process.env.EDGEDB_SLOT) {
        srvcmd = `${srvcmd}-${process.env.EDGEDB_SLOT}`;
    }
    const proc = child_process.spawn(srvcmd, [
        "--temp-dir",
        "--testmode",
        "--echo-runtime-info",
        "--port=auto",
        "--auto-shutdown",
    ]);
    proc.stdout.on("data", (data) => {
        stdoutData += data;
        const m = stdoutData.match(/\nEDGEDB_SERVER_DATA:(\{[^\n]+\})\n/);
        if (m) {
            const runtimeData = JSON.parse(m[1]);
            process.env._JEST_EDGEDB_PORT = runtimeData.port;
            process.env._JEST_EDGEDB_HOST = runtimeData.runstate_dir;
            if (ok) {
                err = null;
                ok([runtimeData.runstate_dir, parseInt(runtimeData.port, 10)]);
            }
            else {
                throw new Error("'done' promise isn't initialized");
            }
        }
    });
    proc.stderr.on("data", (data) => {
        if (err) {
            stderrData += data;
        }
    });
    proc.on("exit", (code, signal) => {
        if (err) {
            console.log("--- EdgeDB output start ---");
            console.log(stdoutData);
            console.log(stderrData);
            console.log("--- EdgeDB output end ---");
            err(`EdgeDB exited prematurely with ` + `code ${code} or signal ${signal}`);
        }
    });
    global.edgedbProc = proc;
    const [host, port] = await done;
    const con = await index_node_1.default(undefined, {
        host,
        port,
        user: "edgedb",
        database: "edgedb",
        admin: true,
    });
    try {
        await con.execute(`
      CREATE DATABASE jest;
    `);
        await con.execute(`
      CREATE SUPERUSER ROLE jest {
        SET password := "jestjest";
      };
    `);
        await con.execute(`
      CONFIGURE SYSTEM INSERT Auth {
        user := "jest",
        priority := 10,
        method := (INSERT SCRAM),
      };
    `);
    }
    catch (e) {
        await con.close();
        throw e;
    }
    global.edgedbConn = con;
    console.log(`EdgeDB test cluster is up [port: ${process.env._JEST_EDGEDB_PORT}]...`);
};
