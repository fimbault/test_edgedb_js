"use strict";
/*!
 * This source file is part of the EdgeDB open source project.
 *
 * Copyright 2019-present MagicStack Inc. and the EdgeDB authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("../src/buffer");
const chars = require("../src/chars");
test("matches edgedb-python packing", () => {
    const w = new buffer_1.WriteMessageBuffer();
    w.beginMessage(chars.$E)
        .writeUInt16(10)
        .writeString("aaaaaa")
        .endMessage()
        .beginMessage(chars.$P)
        .writeUInt32(1000001)
        .writeString("bbbbbbbbb")
        .endMessage();
    const buf = w.unwrap();
    expect(buf.toString("base64")).toBe("RQAAABAACgAAAAZhYWFhYWFQAAAAFQAPQkEAAAAJYmJiYmJiYmJi");
});
test("maintains internal messages integrity", () => {
    const w = new buffer_1.WriteMessageBuffer();
    expect(() => {
        w.writeInt16(10);
    }).toThrowError(buffer_1.BufferError);
    expect(() => {
        w.writeString("SELECT ...");
    }).toThrowError(buffer_1.BufferError);
    expect(() => {
        w.endMessage();
    }).toThrowError(buffer_1.BufferError);
    w.beginMessage(chars.$E);
    expect(() => {
        w.beginMessage(chars.$P);
    }).toThrowError(buffer_1.BufferError);
    expect(() => {
        w.unwrap();
    }).toThrowError(buffer_1.BufferError);
});
