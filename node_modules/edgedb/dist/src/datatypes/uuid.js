"use strict";
/*!
 * This source file is part of the EdgeDB open source project.
 *
 * Copyright 2019-present MagicStack Inc. and the EdgeDB authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const compat_1 = require("../compat");
class UUID {
    constructor(buffer) {
        this._str = null;
        if (buffer.length !== 16) {
            throw new TypeError(`cannot create UUID from ${buffer}; ` +
                `expected buffer to be 16 bytes long`);
        }
        this._buf = buffer;
    }
    toString() {
        if (this._str != null) {
            return this._str;
        }
        const sl = this._buf.toString("hex");
        this._str =
            sl.slice(0, 8) +
                "-" +
                sl.slice(8, 12) +
                "-" +
                sl.slice(12, 16) +
                "-" +
                sl.slice(16, 20) +
                "-" +
                sl.slice(20, 32);
        return this._str;
    }
    get buffer() {
        return this._buf;
    }
    valueOf() {
        return this.toString();
    }
    toJSON() {
        return this.toString();
    }
    [Symbol.toPrimitive](hint) {
        if (hint === "number") {
            throw new TypeError("cannot coerce UUID to a number");
        }
        return this.toString();
    }
    [compat_1.inspect.custom](_depth, options) {
        return `UUID [ ${compat_1.inspect(this.toString(), options.showHidden, 0, options.colors)} ]`;
    }
    static fromString(uuid) {
        const buf = UUIDBufferFromString(uuid);
        return new UUID(buf);
    }
}
exports.UUID = UUID;
function UUIDBufferFromString(uuid) {
    let uuidClean = uuid;
    if (uuidClean.length !== 32) {
        uuidClean = uuidClean.replace(/\-/g, "");
        if (uuidClean.length !== 32) {
            throw new TypeError(`invalid UUID "${uuid}"`);
        }
    }
    const buf = Buffer.from(uuidClean, "hex");
    if (buf.length !== 16) {
        throw new TypeError(`invalid UUID "${uuid}"`);
    }
    return buf;
}
exports.UUIDBufferFromString = UUIDBufferFromString;
