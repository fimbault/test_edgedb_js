import { Connection, TransactionOptions } from "./ifaces";
export declare enum TransactionState {
    NEW = 0,
    STARTED = 1,
    COMMITTED = 2,
    ROLLEDBACK = 3,
    FAILED = 4
}
export declare enum IsolationLevel {
    SERIALIZABLE = "serializable",
    REPEATABLE_READ = "repeatable_read"
}
export declare const connectionsInTransaction: WeakMap<Connection, BaseTransaction>;
declare class BaseTransaction {
    _id: string | null;
    _connection: Connection;
    _deferrable?: boolean;
    _isolation?: IsolationLevel;
    _managed: boolean;
    _nested: boolean;
    _readonly?: boolean;
    _state: TransactionState;
    constructor(connection: Connection, options?: TransactionOptions);
    get state(): TransactionState;
    isActive(): boolean;
    private _checkStateBase;
    private _checkState;
    protected _makeStartQuery(): string;
    private _checkIfNested;
    protected _removeMapReference(): void;
    protected _makeCommitQuery(): string;
    protected _makeRollbackQuery(): string;
}
export declare class Transaction extends BaseTransaction {
    private _execute;
    start(): Promise<void>;
    commit(): Promise<void>;
    rollback(): Promise<void>;
}
export {};
