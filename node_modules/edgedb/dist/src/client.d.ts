/*!
 * This source file is part of the EdgeDB open source project.
 *
 * Copyright 2019-present MagicStack Inc. and the EdgeDB authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { WriteBuffer } from "./buffer";
import { ICodec } from "./codecs/ifaces";
import { Set } from "./datatypes/set";
import { QueryArgs, Connection, IConnectionProxied, TransactionOptions } from "./ifaces";
import { ConnectConfig } from "./con_utils";
export declare const proxyMap: WeakMap<Connection, IConnectionProxied>;
export default function connect(dsn?: string | ConnectConfig | null, options?: ConnectConfig | null): Promise<Connection>;
declare class ConnectionImpl implements Connection {
    private sock;
    private config;
    private paused;
    private connected;
    private lastStatus;
    private codecsRegistry;
    private queryCodecCache;
    private serverSecret;
    private serverSettings;
    private serverXactStatus;
    private buffer;
    private messageWaiterResolve;
    private messageWaiterReject;
    private connWaiter;
    private connWaiterResolve;
    private connWaiterReject;
    private opInProgress;
    private _waitForMessage;
    private _onConnect;
    private _onClose;
    private _onError;
    private _onData;
    private _rejectHeaders;
    private _parseHeaders;
    private _parseDescribeTypeMessage;
    private _parseCommandCompleteMessage;
    private _parseErrorMessage;
    private _parseSyncMessage;
    private _parseDataMessages;
    private _fallthrough;
    private connect;
    private _authSasl;
    private _ensureMessage;
    protected _parse(query: string, asJson: boolean, expectOne: boolean, alwaysDescribe: boolean): Promise<[number, ICodec, ICodec, Buffer | null, Buffer | null]>;
    private _encodeArgs;
    protected _executeFlow(args: QueryArgs, inCodec: ICodec, outCodec: ICodec, result: Set | WriteBuffer): Promise<void>;
    private _optimisticExecuteFlow;
    private _getQueryCacheKey;
    private _validateFetchCardinality;
    private _fetch;
    private _execute;
    private _enterOp;
    private _leaveOp;
    execute(query: string): Promise<void>;
    query(query: string, args?: QueryArgs): Promise<Set>;
    queryOne(query: string, args?: QueryArgs): Promise<any>;
    queryJSON(query: string, args?: QueryArgs): Promise<string>;
    queryOneJSON(query: string, args?: QueryArgs): Promise<string>;
    transaction<T>(action: () => Promise<T>, options?: TransactionOptions): Promise<T>;
    private _abort;
    isClosed(): boolean;
    close(): Promise<void>;
    private _cleanupProxy;
}
export declare class RawConnection extends ConnectionImpl {
    rawParse(query: string): Promise<[Buffer, Buffer]>;
    rawExecute(): Promise<Buffer>;
    static connect(dsn?: string | ConnectConfig | null, options?: ConnectConfig | null): Promise<RawConnection>;
    transaction<T>(action: () => Promise<T>, options?: TransactionOptions): Promise<T>;
    execute(query: string): Promise<void>;
    query(query: string, args?: QueryArgs): Promise<Set>;
    queryOne(query: string, args?: QueryArgs): Promise<any>;
    queryJSON(query: string, args?: QueryArgs): Promise<string>;
    queryOneJSON(query: string, args?: QueryArgs): Promise<string>;
}
export {};
