"use strict";
/*!
 * This source file is part of the EdgeDB open source project.
 *
 * Copyright 2019-present MagicStack Inc. and the EdgeDB authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const net = require("net");
const chars = require("./chars");
const resolve_1 = require("./errors/resolve");
const buffer_1 = require("./buffer");
const registry_1 = require("./codecs/registry");
const set_1 = require("./datatypes/set");
const lru_1 = require("./lru");
const tuple_1 = require("./codecs/tuple");
const namedtuple_1 = require("./codecs/namedtuple");
const ifaces_1 = require("./ifaces");
const scram = require("./scram");
const con_utils_1 = require("./con_utils");
const transaction_1 = require("./transaction");
const PROTO_VER_MAJOR = 0;
const PROTO_VER_MINOR = 8;
var AuthenticationStatuses;
(function (AuthenticationStatuses) {
    AuthenticationStatuses[AuthenticationStatuses["AUTH_OK"] = 0] = "AUTH_OK";
    AuthenticationStatuses[AuthenticationStatuses["AUTH_SASL"] = 10] = "AUTH_SASL";
    AuthenticationStatuses[AuthenticationStatuses["AUTH_SASL_CONTINUE"] = 11] = "AUTH_SASL_CONTINUE";
    AuthenticationStatuses[AuthenticationStatuses["AUTH_SASL_FINAL"] = 12] = "AUTH_SASL_FINAL";
})(AuthenticationStatuses || (AuthenticationStatuses = {}));
var TransactionStatus;
(function (TransactionStatus) {
    TransactionStatus[TransactionStatus["TRANS_IDLE"] = 0] = "TRANS_IDLE";
    TransactionStatus[TransactionStatus["TRANS_ACTIVE"] = 1] = "TRANS_ACTIVE";
    TransactionStatus[TransactionStatus["TRANS_INTRANS"] = 2] = "TRANS_INTRANS";
    TransactionStatus[TransactionStatus["TRANS_INERROR"] = 3] = "TRANS_INERROR";
    TransactionStatus[TransactionStatus["TRANS_UNKNOWN"] = 4] = "TRANS_UNKNOWN";
})(TransactionStatus || (TransactionStatus = {}));
exports.proxyMap = new WeakMap();
function connect(dsn, options) {
    return ConnectionImpl.connect(dsn, options);
}
exports.default = connect;
class ConnectionImpl {
    constructor(sock, config) {
        this.connected = false;
        this.opInProgress = false;
        this.buffer = new buffer_1.ReadMessageBuffer();
        this.codecsRegistry = new registry_1.CodecsRegistry();
        this.queryCodecCache = new lru_1.default({ capacity: 1000 });
        this.lastStatus = null;
        this.serverSecret = null;
        this.serverSettings = new Map();
        this.serverXactStatus = TransactionStatus.TRANS_UNKNOWN;
        this.messageWaiterResolve = null;
        this.messageWaiterReject = null;
        this.connWaiterResolve = null;
        this.connWaiterReject = null;
        this.connWaiter = new Promise((resolve, reject) => {
            this.connWaiterResolve = resolve;
            this.connWaiterReject = reject;
        });
        this.paused = false;
        this.sock = sock;
        this.sock.setNoDelay();
        this.sock.on("error", this._onError.bind(this));
        this.sock.on("data", this._onData.bind(this));
        this.sock.on("connect", this._onConnect.bind(this));
        this.sock.on("close", this._onClose.bind(this));
        this.config = config;
    }
    async _waitForMessage() {
        if (this.buffer.takeMessage()) {
            return;
        }
        if (this.paused) {
            this.paused = false;
            this.sock.resume();
        }
        await new Promise((resolve, reject) => {
            this.messageWaiterResolve = resolve;
            this.messageWaiterReject = reject;
        });
    }
    _onConnect() {
        if (this.connWaiterResolve) {
            this.connWaiterResolve(true);
            this.connWaiterReject = null;
            this.connWaiterResolve = null;
        }
    }
    _onClose() {
        this.close();
    }
    _onError(err) {
        if (this.connWaiterReject) {
            this.connWaiterReject(err);
            this.connWaiterReject = null;
            this.connWaiterResolve = null;
        }
        if (this.messageWaiterReject) {
            this.messageWaiterReject(err);
            this.messageWaiterResolve = null;
            this.messageWaiterReject = null;
        }
    }
    _onData(data) {
        let pause = false;
        try {
            pause = this.buffer.feed(data);
        }
        catch (e) {
            if (this.messageWaiterReject) {
                this.messageWaiterReject(e);
            }
            else {
                throw e;
            }
        }
        if (pause) {
            this.paused = true;
            this.sock.pause();
        }
        if (this.messageWaiterResolve) {
            if (this.buffer.takeMessage()) {
                this.messageWaiterResolve(true);
                this.messageWaiterResolve = null;
                this.messageWaiterReject = null;
            }
        }
    }
    _rejectHeaders() {
        const nheaders = this.buffer.readInt16();
        if (nheaders) {
            throw new Error("unexpected headers");
        }
    }
    _parseHeaders() {
        const ret = new Map();
        let numFields = this.buffer.readInt16();
        while (numFields) {
            const key = this.buffer.readInt16();
            const value = this.buffer.readLenPrefixedBuffer();
            ret.set(key, value);
            numFields--;
        }
        return ret;
    }
    _parseDescribeTypeMessage() {
        this._rejectHeaders();
        const cardinality = this.buffer.readChar();
        const inTypeId = this.buffer.readUUID();
        const inTypeData = this.buffer.readLenPrefixedBuffer();
        const outTypeId = this.buffer.readUUID();
        const outTypeData = this.buffer.readLenPrefixedBuffer();
        this.buffer.finishMessage();
        let inCodec = this.codecsRegistry.getCodec(inTypeId);
        if (inCodec == null) {
            inCodec = this.codecsRegistry.buildCodec(inTypeData);
        }
        let outCodec = this.codecsRegistry.getCodec(outTypeId);
        if (outCodec == null) {
            outCodec = this.codecsRegistry.buildCodec(outTypeData);
        }
        return [cardinality, inCodec, outCodec, inTypeData, outTypeData];
    }
    _parseCommandCompleteMessage() {
        this._rejectHeaders();
        const status = this.buffer.readString();
        this.buffer.finishMessage();
        return status;
    }
    _parseErrorMessage() {
        const severity = this.buffer.readChar();
        const code = this.buffer.readUInt32();
        const message = this.buffer.readString();
        const attrs = this._parseHeaders();
        const errorType = resolve_1.resolveErrorCode(code);
        this.buffer.finishMessage();
        const err = new errorType(message);
        return err;
    }
    _parseSyncMessage() {
        this._parseHeaders();
        const status = this.buffer.readChar();
        switch (status) {
            case chars.$I:
                this.serverXactStatus = TransactionStatus.TRANS_IDLE;
                break;
            case chars.$T:
                this.serverXactStatus = TransactionStatus.TRANS_INTRANS;
                break;
            case chars.$E:
                this.serverXactStatus = TransactionStatus.TRANS_INERROR;
                break;
            default:
                this.serverXactStatus = TransactionStatus.TRANS_UNKNOWN;
        }
        this.buffer.finishMessage();
    }
    _parseDataMessages(codec, result) {
        const frb = buffer_1.ReadBuffer.alloc();
        const $D = chars.$D;
        const buffer = this.buffer;
        if (Array.isArray(result)) {
            while (buffer.takeMessageType($D)) {
                buffer.consumeMessageInto(frb);
                frb.discard(6);
                result.push(codec.decode(frb));
                frb.finish();
            }
        }
        else {
            while (buffer.takeMessageType($D)) {
                const msg = buffer.consumeMessage();
                result.writeChar($D);
                result.writeInt32(msg.length + 4);
                result.writeBuffer(msg);
            }
        }
    }
    _fallthrough() {
        const mtype = this.buffer.getMessageType();
        switch (mtype) {
            case chars.$S: {
                const name = this.buffer.readString();
                const value = this.buffer.readString();
                this.serverSettings.set(name, value);
                this.buffer.finishMessage();
                break;
            }
            case chars.$L: {
                const severity = this.buffer.readChar();
                const code = this.buffer.readUInt32();
                const message = this.buffer.readString();
                this._parseHeaders();
                this.buffer.finishMessage();
                console.info("SERVER MESSAGE", severity, code, message);
                break;
            }
            default:
                throw new Error(`unexpected message type ${mtype} ("${chars.chr(mtype)}")`);
        }
    }
    async connect() {
        await this.connWaiter;
        const handshake = new buffer_1.WriteMessageBuffer();
        handshake
            .beginMessage(chars.$V)
            .writeInt16(1)
            .writeInt16(0);
        handshake.writeInt16(2);
        handshake.writeString("user");
        handshake.writeString(this.config.user);
        handshake.writeString("database");
        handshake.writeString(this.config.database);
        handshake.writeInt16(0);
        handshake.endMessage();
        this.sock.write(handshake.unwrap());
        while (true) {
            if (!this.buffer.takeMessage()) {
                await this._waitForMessage();
            }
            const mtype = this.buffer.getMessageType();
            switch (mtype) {
                case chars.$v: {
                    const hi = this.buffer.readInt16();
                    const lo = this.buffer.readInt16();
                    this._parseHeaders();
                    this.buffer.finishMessage();
                    if (hi !== PROTO_VER_MAJOR || (hi === 0 && lo !== PROTO_VER_MINOR)) {
                        throw new Error(`the server requested an unsupported version of ` +
                            `the protocol ${hi}.${lo}`);
                    }
                    break;
                }
                case chars.$R: {
                    const status = this.buffer.readInt32();
                    if (status === AuthenticationStatuses.AUTH_OK) {
                        this.buffer.finishMessage();
                    }
                    else if (status === AuthenticationStatuses.AUTH_SASL) {
                        await this._authSasl();
                    }
                    else {
                        throw new Error(`unsupported authentication method requested by the ` +
                            `server: ${status}`);
                    }
                    break;
                }
                case chars.$K: {
                    this.serverSecret = this.buffer.readBuffer(32);
                    this.buffer.finishMessage();
                    break;
                }
                case chars.$E: {
                    throw this._parseErrorMessage();
                }
                case chars.$Z: {
                    this._parseSyncMessage();
                    this.connected = true;
                    return;
                }
                default:
                    this._fallthrough();
            }
        }
    }
    async _authSasl() {
        const numMethods = this.buffer.readInt32();
        if (numMethods <= 0) {
            throw new Error("the server requested SASL authentication but did not offer any methods");
        }
        const methods = [];
        let foundScram256 = false;
        for (let _ = 0; _ < numMethods; _++) {
            const method = this.buffer.readLenPrefixedBuffer().toString("utf8");
            if (method === "SCRAM-SHA-256") {
                foundScram256 = true;
            }
            methods.push(method);
        }
        this.buffer.finishMessage();
        if (!foundScram256) {
            throw new Error(`the server offered the following SASL authentication ` +
                `methods: ${methods.join(", ")}, neither are supported.`);
        }
        const clientNonce = await scram.generateNonce();
        const [clientFirst, clientFirstBare] = scram.buildClientFirstMessage(clientNonce, this.config.user);
        const wb = new buffer_1.WriteMessageBuffer();
        wb.beginMessage(chars.$p)
            .writeString("SCRAM-SHA-256")
            .writeString(clientFirst)
            .endMessage();
        this.sock.write(wb.unwrap());
        await this._ensureMessage(chars.$R, "SASLContinue");
        let status = this.buffer.readInt32();
        if (status !== AuthenticationStatuses.AUTH_SASL_CONTINUE) {
            throw new Error(`expected SASLContinue from the server, received ${status}`);
        }
        const serverFirst = this.buffer.readString();
        this.buffer.finishMessage();
        const [serverNonce, salt, itercount] = scram.parseServerFirstMessage(serverFirst);
        const [clientFinal, expectedServerSig] = scram.buildClientFinalMessage(this.config.password || "", salt, itercount, clientFirstBare, serverFirst, serverNonce);
        wb.reset()
            .beginMessage(chars.$r)
            .writeString(clientFinal)
            .endMessage();
        this.sock.write(wb.unwrap());
        await this._ensureMessage(chars.$R, "SASLFinal");
        status = this.buffer.readInt32();
        if (status !== AuthenticationStatuses.AUTH_SASL_FINAL) {
            throw new Error(`expected SASLFinal from the server, received ${status}`);
        }
        const serverFinal = this.buffer.readString();
        this.buffer.finishMessage();
        const serverSig = scram.parseServerFinalMessage(serverFinal);
        if (!serverSig.equals(expectedServerSig)) {
            throw new Error("server SCRAM proof does not match");
        }
    }
    async _ensureMessage(expectedMtype, err) {
        if (!this.buffer.takeMessage()) {
            await this._waitForMessage();
        }
        const mtype = this.buffer.getMessageType();
        switch (mtype) {
            case chars.$E: {
                throw this._parseErrorMessage();
            }
            case expectedMtype: {
                return;
            }
            default: {
                throw new Error(`expected ${err} from the server, received ${chars.chr(mtype)}`);
            }
        }
    }
    async _parse(query, asJson, expectOne, alwaysDescribe) {
        const wb = new buffer_1.WriteMessageBuffer();
        wb.beginMessage(chars.$P)
            .writeInt16(0)
            .writeChar(asJson ? chars.$j : chars.$b)
            .writeChar(expectOne ? chars.$o : chars.$m)
            .writeString("")
            .writeString(query)
            .endMessage();
        wb.writeSync();
        this.sock.write(wb.unwrap());
        let cardinality;
        let inTypeId;
        let outTypeId;
        let inCodec;
        let outCodec;
        let parsing = true;
        let error = null;
        let inCodecData = null;
        let outCodecData = null;
        while (parsing) {
            if (!this.buffer.takeMessage()) {
                await this._waitForMessage();
            }
            const mtype = this.buffer.getMessageType();
            switch (mtype) {
                case chars.$1: {
                    this._rejectHeaders();
                    cardinality = this.buffer.readChar();
                    inTypeId = this.buffer.readUUID();
                    outTypeId = this.buffer.readUUID();
                    this.buffer.finishMessage();
                    break;
                }
                case chars.$E: {
                    error = this._parseErrorMessage();
                    break;
                }
                case chars.$Z: {
                    this._parseSyncMessage();
                    parsing = false;
                    break;
                }
                default:
                    this._fallthrough();
            }
        }
        if (error != null) {
            throw error;
        }
        if (inTypeId == null || outTypeId == null) {
            throw new Error("did not receive in/out type ids in Parse response");
        }
        inCodec = this.codecsRegistry.getCodec(inTypeId);
        outCodec = this.codecsRegistry.getCodec(outTypeId);
        if (inCodec == null || outCodec == null || alwaysDescribe) {
            wb.reset();
            wb.beginMessage(chars.$D)
                .writeInt16(0)
                .writeChar(chars.$T)
                .writeString("")
                .endMessage()
                .writeSync();
            this.sock.write(wb.unwrap());
            parsing = true;
            while (parsing) {
                if (!this.buffer.takeMessage()) {
                    await this._waitForMessage();
                }
                const mtype = this.buffer.getMessageType();
                switch (mtype) {
                    case chars.$T: {
                        try {
                            [
                                cardinality,
                                inCodec,
                                outCodec,
                                inCodecData,
                                outCodecData,
                            ] = this._parseDescribeTypeMessage();
                        }
                        catch (e) {
                            error = e;
                        }
                        break;
                    }
                    case chars.$E: {
                        error = this._parseErrorMessage();
                        break;
                    }
                    case chars.$Z: {
                        this._parseSyncMessage();
                        parsing = false;
                        break;
                    }
                    default:
                        this._fallthrough();
                }
            }
            if (error != null) {
                throw error;
            }
        }
        if (cardinality == null || outCodec == null || inCodec == null) {
            throw new Error("failed to receive type information in response to a Parse message");
        }
        return [cardinality, inCodec, outCodec, inCodecData, outCodecData];
    }
    _encodeArgs(args, inCodec) {
        if (inCodec === tuple_1.EMPTY_TUPLE_CODEC && !args) {
            return tuple_1.EmptyTupleCodec.BUFFER;
        }
        if (inCodec instanceof namedtuple_1.NamedTupleCodec || inCodec instanceof tuple_1.TupleCodec) {
            return inCodec.encodeArgs(args);
        }
        throw new Error("invalid input codec");
    }
    async _executeFlow(args, inCodec, outCodec, result) {
        const wb = new buffer_1.WriteMessageBuffer();
        wb.beginMessage(chars.$E)
            .writeInt16(0)
            .writeString("")
            .writeBuffer(this._encodeArgs(args, inCodec))
            .endMessage()
            .writeSync();
        this.sock.write(wb.unwrap());
        let parsing = true;
        let error = null;
        while (parsing) {
            if (!this.buffer.takeMessage()) {
                await this._waitForMessage();
            }
            const mtype = this.buffer.getMessageType();
            switch (mtype) {
                case chars.$D: {
                    if (error == null) {
                        try {
                            this._parseDataMessages(outCodec, result);
                        }
                        catch (e) {
                            error = e;
                            this.buffer.finishMessage();
                        }
                    }
                    else {
                        this.buffer.discardMessage();
                    }
                    break;
                }
                case chars.$C: {
                    this.lastStatus = this._parseCommandCompleteMessage();
                    break;
                }
                case chars.$E: {
                    error = this._parseErrorMessage();
                    break;
                }
                case chars.$Z: {
                    this._parseSyncMessage();
                    parsing = false;
                    break;
                }
                default:
                    this._fallthrough();
            }
        }
        if (error != null) {
            throw error;
        }
    }
    async _optimisticExecuteFlow(args, asJson, expectOne, inCodec, outCodec, query, result) {
        const wb = new buffer_1.WriteMessageBuffer();
        wb.beginMessage(chars.$O);
        wb.writeInt16(0);
        wb.writeChar(asJson ? chars.$j : chars.$b);
        wb.writeChar(expectOne ? chars.$o : chars.$m);
        wb.writeString(query);
        wb.writeBuffer(inCodec.tidBuffer);
        wb.writeBuffer(outCodec.tidBuffer);
        wb.writeBuffer(this._encodeArgs(args, inCodec));
        wb.endMessage();
        wb.writeSync();
        this.sock.write(wb.unwrap());
        let reExec = false;
        let error = null;
        let parsing = true;
        let newCard = null;
        while (parsing) {
            if (!this.buffer.takeMessage()) {
                await this._waitForMessage();
            }
            const mtype = this.buffer.getMessageType();
            switch (mtype) {
                case chars.$D: {
                    if (error == null) {
                        try {
                            this._parseDataMessages(outCodec, result);
                        }
                        catch (e) {
                            error = e;
                            this.buffer.finishMessage();
                        }
                    }
                    else {
                        this.buffer.discardMessage();
                    }
                    break;
                }
                case chars.$C: {
                    this.lastStatus = this._parseCommandCompleteMessage();
                    break;
                }
                case chars.$Z: {
                    this._parseSyncMessage();
                    parsing = false;
                    break;
                }
                case chars.$T: {
                    try {
                        [newCard, inCodec, outCodec] = this._parseDescribeTypeMessage();
                        const key = this._getQueryCacheKey(query, asJson, expectOne);
                        this.queryCodecCache.set(key, [newCard, inCodec, outCodec]);
                        reExec = true;
                    }
                    catch (e) {
                        error = e;
                    }
                    break;
                }
                case chars.$E: {
                    error = this._parseErrorMessage();
                    break;
                }
                default:
                    this._fallthrough();
            }
        }
        if (error != null) {
            throw error;
        }
        if (reExec) {
            this._validateFetchCardinality(newCard, asJson, expectOne);
            return await this._executeFlow(args, inCodec, outCodec, result);
        }
    }
    _getQueryCacheKey(query, asJson, expectOne) {
        return [asJson, expectOne, query.length, query].join(";");
    }
    _validateFetchCardinality(card, asJson, expectOne) {
        if (expectOne && card === chars.$n) {
            const methname = asJson ? "queryOneJSON" : "queryOne";
            throw new Error(`query executed via ${methname}() returned no data`);
        }
    }
    async _fetch(query, args, asJson, expectOne) {
        const key = this._getQueryCacheKey(query, asJson, expectOne);
        const ret = new set_1.Set();
        if (this.queryCodecCache.has(key)) {
            const [card, inCodec, outCodec] = this.queryCodecCache.get(key);
            this._validateFetchCardinality(card, asJson, expectOne);
            await this._optimisticExecuteFlow(args, asJson, expectOne, inCodec, outCodec, query, ret);
        }
        else {
            const [card, inCodec, outCodec] = await this._parse(query, asJson, expectOne, false);
            this._validateFetchCardinality(card, asJson, expectOne);
            this.queryCodecCache.set(key, [card, inCodec, outCodec]);
            await this._executeFlow(args, inCodec, outCodec, ret);
        }
        if (expectOne) {
            if (ret && ret.length) {
                return ret[0];
            }
            else {
                throw new Error("query returned no data");
            }
        }
        else {
            if (ret && ret.length) {
                if (asJson) {
                    return ret[0];
                }
                else {
                    return ret;
                }
            }
            else {
                if (asJson) {
                    return "[]";
                }
                else {
                    return ret;
                }
            }
        }
    }
    async _execute(query) {
        const wb = new buffer_1.WriteMessageBuffer();
        wb.beginMessage(chars.$Q)
            .writeInt16(0)
            .writeString(query)
            .endMessage();
        this.sock.write(wb.unwrap());
        let error = null;
        let parsing = true;
        while (parsing) {
            if (!this.buffer.takeMessage()) {
                await this._waitForMessage();
            }
            const mtype = this.buffer.getMessageType();
            switch (mtype) {
                case chars.$C: {
                    this.lastStatus = this._parseCommandCompleteMessage();
                    break;
                }
                case chars.$Z: {
                    this._parseSyncMessage();
                    parsing = false;
                    break;
                }
                case chars.$E: {
                    error = this._parseErrorMessage();
                    break;
                }
                default:
                    this._fallthrough();
            }
        }
        if (error != null) {
            throw error;
        }
    }
    _enterOp() {
        if (this.opInProgress) {
            throw new Error("Another operation is in progress. Use multiple separate " +
                "connections to run operations concurrently.");
        }
        this.opInProgress = true;
    }
    _leaveOp() {
        this.opInProgress = false;
    }
    async execute(query) {
        this._enterOp();
        try {
            await this._execute(query);
        }
        finally {
            this._leaveOp();
        }
    }
    async query(query, args = null) {
        this._enterOp();
        try {
            return await this._fetch(query, args, false, false);
        }
        finally {
            this._leaveOp();
        }
    }
    async queryOne(query, args = null) {
        this._enterOp();
        try {
            return await this._fetch(query, args, false, true);
        }
        finally {
            this._leaveOp();
        }
    }
    async queryJSON(query, args = null) {
        this._enterOp();
        try {
            return await this._fetch(query, args, true, false);
        }
        finally {
            this._leaveOp();
        }
    }
    async queryOneJSON(query, args = null) {
        this._enterOp();
        try {
            return await this._fetch(query, args, true, true);
        }
        finally {
            this._leaveOp();
        }
    }
    async transaction(action, options) {
        let result;
        const transaction = new transaction_1.Transaction(this, options);
        await transaction.start();
        try {
            result = await action();
            await transaction.commit();
        }
        catch (err) {
            await transaction.rollback();
            throw err;
        }
        return result;
    }
    _abort() {
        if (this.sock && this.connected) {
            this.sock.destroy();
        }
        this.connected = false;
    }
    isClosed() {
        return !this.connected;
    }
    async close() {
        this._enterOp();
        try {
            if (this.sock && this.connected) {
                this.sock.write(new buffer_1.WriteMessageBuffer()
                    .beginMessage(chars.$X)
                    .endMessage()
                    .unwrap());
            }
            this._abort();
        }
        finally {
            this._leaveOp();
            this._cleanupProxy();
        }
    }
    _cleanupProxy() {
        const proxy = exports.proxyMap.get(this);
        if (proxy != null) {
            proxy[ifaces_1.onConnectionClose]();
            exports.proxyMap.delete(this);
        }
    }
    static newSock(addr) {
        if (typeof addr === "string") {
            return net.createConnection(addr);
        }
        else {
            const [host, port] = addr;
            return net.createConnection(port, host);
        }
    }
    static async connect(dsn, options) {
        let config = null;
        if (typeof dsn === "string") {
            config = { ...options, dsn };
        }
        else {
            if (dsn != null) {
                console.warn("`options` as the first argument to `edgedb.connect` is " +
                    "deprecated, use " +
                    "`edgedb.connect('instance_name_or_dsn', options)`");
            }
            config = { ...dsn, ...options };
        }
        const { addrs, ...cfg } = con_utils_1.parseConnectArguments(config);
        let err;
        let errMsg = "failed to connect";
        for (const addr of addrs) {
            errMsg =
                "failed to connect: could not establish connection to " +
                    (typeof addr === "string" ? addr : addr[0] + ":" + addr[1]);
            const sock = this.newSock(addr);
            const conn = new this(sock, { addrs: [addr], ...cfg });
            const connPromise = conn.connect();
            let timeout = null;
            if (cfg.connect_timeout) {
                err = new Error(errMsg + " in " + cfg.connect_timeout + "ms");
                timeout = setTimeout(() => {
                    if (!conn.connected) {
                        conn.sock.destroy(err);
                    }
                }, cfg.connect_timeout);
            }
            try {
                await connPromise;
            }
            catch (e) {
                conn._abort();
                if (typeof e.message === "string" &&
                    e.message.indexOf("failed to connect") !== -1) {
                    continue;
                }
                else {
                    throw e;
                }
            }
            finally {
                if (timeout != null) {
                    clearTimeout(timeout);
                }
            }
            return conn;
        }
        if (typeof err === "undefined") {
            err = new Error(errMsg);
        }
        throw err;
    }
}
class RawConnection extends ConnectionImpl {
    async rawParse(query) {
        const result = await this._parse(query, false, false, true);
        return [result[3], result[4]];
    }
    async rawExecute() {
        const result = new buffer_1.WriteBuffer();
        await this._executeFlow(null, tuple_1.EMPTY_TUPLE_CODEC, tuple_1.EMPTY_TUPLE_CODEC, result);
        return result.unwrap();
    }
    static async connect(dsn, options) {
        return (await super.connect(dsn, options));
    }
    async transaction(action, options) {
        throw new Error("not implemented");
    }
    async execute(query) {
        throw new Error("not implemented");
    }
    async query(query, args = null) {
        throw new Error("not implemented");
    }
    async queryOne(query, args = null) {
        throw new Error("not implemented");
    }
    async queryJSON(query, args = null) {
        throw new Error("not implemented");
    }
    async queryOneJSON(query, args = null) {
        throw new Error("not implemented");
    }
}
exports.RawConnection = RawConnection;
