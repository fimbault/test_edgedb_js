"use strict";
/*!
 * This source file is part of the EdgeDB open source project.
 *
 * Copyright 2019-present MagicStack Inc. and the EdgeDB authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ifaces_1 = require("./ifaces");
const buffer_1 = require("../buffer");
const object_1 = require("../datatypes/object");
class ObjectCodec extends ifaces_1.Codec {
    constructor(tid, codecs, names, flags) {
        super(tid);
        this.codecs = codecs;
        const newNames = new Array(names.length);
        for (let i = 0; i < names.length; i++) {
            if (flags[i] & object_1.EDGE_POINTER_IS_LINKPROP) {
                newNames[i] = `@${names[i]}`;
            }
            else {
                newNames[i] = names[i];
            }
        }
        this.names = newNames;
        this.objectType = object_1.generateType(newNames, flags);
    }
    encode(_buf, _object) {
        throw new Error("Objects cannot be passed as arguments");
    }
    decode(buf) {
        const codecs = this.codecs;
        const names = this.names;
        const objType = this.objectType;
        const els = buf.readUInt32();
        if (els !== codecs.length) {
            throw new Error(`cannot decode Object: expected ${codecs.length} elements, got ${els}`);
        }
        const elemBuf = buffer_1.ReadBuffer.alloc();
        const result = new objType();
        for (let i = 0; i < els; i++) {
            buf.discard(4);
            const elemLen = buf.readInt32();
            const name = names[i];
            let val = null;
            if (elemLen !== -1) {
                buf.sliceInto(elemBuf, elemLen);
                val = codecs[i].decode(elemBuf);
                elemBuf.finish();
            }
            result[name] = val;
        }
        return result;
    }
    getSubcodecs() {
        return Array.from(this.codecs);
    }
    getSubcodecsNames() {
        return Array.from(this.names);
    }
    getKind() {
        return "object";
    }
}
exports.ObjectCodec = ObjectCodec;
