"use strict";
/*!
 * This source file is part of the EdgeDB open source project.
 *
 * Copyright 2019-present MagicStack Inc. and the EdgeDB authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ifaces_1 = require("./ifaces");
const datetime_1 = require("../datatypes/datetime");
const dateutil_1 = require("../datatypes/dateutil");
const TIMESHIFT = 946684800000;
const DATESHIFT_ORD = dateutil_1.ymd2ord(2000, 1, 1);
class DateTimeCodec extends ifaces_1.ScalarCodec {
    encode(buf, object) {
        if (!(object instanceof Date)) {
            throw new Error(`a Date instance was expected, got "${object}"`);
        }
        const ms = object.getTime() - TIMESHIFT;
        const us = ms * 1000.0;
        buf.writeInt32(8);
        buf.writeInt64(us);
    }
    decode(buf) {
        const us = buf.readBigInt64();
        const ms = Number(us) / 1000.0;
        return new Date(ms + TIMESHIFT);
    }
}
exports.DateTimeCodec = DateTimeCodec;
class LocalDateTimeCodec extends ifaces_1.ScalarCodec {
    encode(buf, object) {
        if (!(object instanceof datetime_1.LocalDateTime)) {
            throw new Error(`a LocalDateTime instance was expected, got "${object}"`);
        }
        const ms = object.getTime() - TIMESHIFT;
        const us = ms * 1000.0;
        buf.writeInt32(8);
        buf.writeInt64(us);
    }
    decode(buf) {
        const us = buf.readBigInt64();
        const ms = Number(us) / 1000.0;
        return new datetime_1.LocalDateTime(new Date(ms + TIMESHIFT), datetime_1.DATE_PRIVATE);
    }
}
exports.LocalDateTimeCodec = LocalDateTimeCodec;
class LocalDateCodec extends ifaces_1.ScalarCodec {
    encode(buf, object) {
        if (!(object instanceof datetime_1.LocalDate)) {
            throw new Error(`a LocalDateTime instance was expected, got "${object}"`);
        }
        buf.writeInt32(4);
        buf.writeInt32(object.toOrdinal() - DATESHIFT_ORD);
    }
    decode(buf) {
        const ord = buf.readInt32();
        return datetime_1.LocalDate.fromOrdinal(ord + DATESHIFT_ORD);
    }
}
exports.LocalDateCodec = LocalDateCodec;
class LocalTimeCodec extends ifaces_1.ScalarCodec {
    encode(buf, object) {
        if (!(object instanceof datetime_1.LocalTime)) {
            throw new Error(`a LocalTime instance was expected, got "${object}"`);
        }
        buf.writeInt32(8);
        const ms = (object.getHours() * 3600.0 +
            object.getMinutes() * 60.0 +
            object.getSeconds()) *
            1000.0 +
            object.getMilliseconds();
        buf.writeInt64(ms * 1000.0);
    }
    decode(buf) {
        const us = Number(buf.readBigInt64());
        let seconds = Math.floor(us / 1000000);
        const ms = Math.floor((us % 1000000) / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = Math.floor(seconds % 60);
        const hours = Math.floor(minutes / 60);
        minutes = Math.floor(minutes % 60);
        return new datetime_1.LocalTime(hours, minutes, seconds, ms);
    }
}
exports.LocalTimeCodec = LocalTimeCodec;
class DurationCodec extends ifaces_1.ScalarCodec {
    encode(buf, object) {
        if (!(object instanceof datetime_1.Duration)) {
            throw new Error(`a Duration instance was expected, got "${object}"`);
        }
        buf.writeInt32(16);
        buf.writeBigInt64(object.toMicroseconds());
        buf.writeInt32(0);
        buf.writeInt32(0);
    }
    decode(buf) {
        const us = buf.readBigInt64();
        const days = buf.readInt32();
        const months = buf.readInt32();
        if (days !== 0) {
            throw new Error("non-zero reserved bytes in duration");
        }
        if (months !== 0) {
            throw new Error("non-zero reserved bytes in duration");
        }
        return datetime_1.Duration.fromMicroseconds(us);
    }
}
exports.DurationCodec = DurationCodec;
