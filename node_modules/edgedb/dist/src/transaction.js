"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("./errors");
const utils_1 = require("./utils");
var TransactionState;
(function (TransactionState) {
    TransactionState[TransactionState["NEW"] = 0] = "NEW";
    TransactionState[TransactionState["STARTED"] = 1] = "STARTED";
    TransactionState[TransactionState["COMMITTED"] = 2] = "COMMITTED";
    TransactionState[TransactionState["ROLLEDBACK"] = 3] = "ROLLEDBACK";
    TransactionState[TransactionState["FAILED"] = 4] = "FAILED";
})(TransactionState = exports.TransactionState || (exports.TransactionState = {}));
var IsolationLevel;
(function (IsolationLevel) {
    IsolationLevel["SERIALIZABLE"] = "serializable";
    IsolationLevel["REPEATABLE_READ"] = "repeatable_read";
})(IsolationLevel = exports.IsolationLevel || (exports.IsolationLevel = {}));
exports.connectionsInTransaction = new WeakMap();
class BaseTransaction {
    constructor(connection, options) {
        if (options === undefined) {
            options = {};
        }
        this._connection = connection;
        this._deferrable = options.deferrable;
        this._id = null;
        this._isolation = options.isolation;
        this._managed = false;
        this._nested = false;
        this._readonly = options.readonly;
        this._state = TransactionState.NEW;
    }
    get state() {
        return this._state;
    }
    isActive() {
        return this._state === TransactionState.STARTED;
    }
    _checkStateBase(opname) {
        if (this._state === TransactionState.COMMITTED) {
            throw new errors.InterfaceError(`cannot ${opname}; the transaction is already committed`);
        }
        if (this._state === TransactionState.ROLLEDBACK) {
            throw new errors.InterfaceError(`cannot ${opname}; the transaction is already rolled back`);
        }
        if (this._state === TransactionState.FAILED) {
            throw new errors.InterfaceError(`cannot ${opname}; the transaction is in error state`);
        }
    }
    _checkState(opname) {
        if (this._state !== TransactionState.STARTED) {
            if (this._state === TransactionState.NEW) {
                throw new errors.InterfaceError(`cannot ${opname}; the transaction is not yet started`);
            }
            this._checkStateBase(opname);
        }
    }
    _makeStartQuery() {
        this._checkStateBase("start");
        if (this._state === TransactionState.STARTED) {
            throw new errors.InterfaceError("cannot start; the transaction is already started");
        }
        this._checkIfNested();
        let query;
        if (this._nested) {
            this._id = utils_1.getUniqueId("savepoint");
            query = `DECLARE SAVEPOINT ${this._id};`;
        }
        else {
            query = "START TRANSACTION";
            if (this._isolation === IsolationLevel.REPEATABLE_READ) {
                query = "START TRANSACTION ISOLATION REPEATABLE READ";
            }
            else if (this._isolation === IsolationLevel.SERIALIZABLE) {
                query = "START TRANSACTION ISOLATION SERIALIZABLE";
            }
            if (this._readonly) {
                query += " READ ONLY";
            }
            else if (this._readonly !== undefined) {
                query += " READ WRITE";
            }
            if (this._deferrable) {
                query += " DEFERRABLE";
            }
            else if (this._deferrable !== undefined) {
                query += " NOT DEFERRABLE";
            }
            query += ";";
        }
        return query;
    }
    _checkIfNested() {
        const connection = this._connection;
        const topTransaction = exports.connectionsInTransaction.get(connection);
        if (!topTransaction) {
            exports.connectionsInTransaction.set(connection, this);
        }
        else {
            if (this._isolation === undefined) {
                this._isolation = topTransaction._isolation;
            }
            if (this._readonly === undefined) {
                this._readonly = topTransaction._readonly;
            }
            if (this._deferrable === undefined) {
                this._deferrable = topTransaction._deferrable;
            }
            if (this._isolation !== topTransaction._isolation) {
                throw new errors.InterfaceError(`nested transaction has a different isolation level: ` +
                    `current ${this._isolation} != outer ${topTransaction._isolation}`);
            }
            if (this._readonly !== topTransaction._readonly) {
                throw new errors.InterfaceError(`nested transaction has a different read-write spec: ` +
                    `current ${this._readonly} != outer ${topTransaction._readonly}`);
            }
            if (this._deferrable !== topTransaction._deferrable) {
                throw new errors.InterfaceError(`nested transaction has a different deferrable spec: ` +
                    `current ${this._deferrable} != outer ${topTransaction._deferrable}`);
            }
            this._nested = true;
        }
    }
    _removeMapReference() {
        if (exports.connectionsInTransaction.get(this._connection) === this) {
            exports.connectionsInTransaction.delete(this._connection);
        }
    }
    _makeCommitQuery() {
        this._checkState("commit");
        this._removeMapReference();
        if (this._nested) {
            return `RELEASE SAVEPOINT ${this._id};`;
        }
        return "COMMIT;";
    }
    _makeRollbackQuery() {
        this._checkState("rollback");
        this._removeMapReference();
        if (this._nested) {
            return `ROLLBACK TO SAVEPOINT ${this._id};`;
        }
        return "ROLLBACK;";
    }
}
class Transaction extends BaseTransaction {
    async _execute(query, successState) {
        try {
            await this._connection.execute(query);
            this._state = successState;
        }
        catch (error) {
            this._state = TransactionState.FAILED;
            throw error;
        }
    }
    async start() {
        await this._execute(this._makeStartQuery(), TransactionState.STARTED);
    }
    async commit() {
        await this._execute(this._makeCommitQuery(), TransactionState.COMMITTED);
    }
    async rollback() {
        await this._execute(this._makeRollbackQuery(), TransactionState.ROLLEDBACK);
    }
}
exports.Transaction = Transaction;
